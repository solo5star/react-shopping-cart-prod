{"version":3,"file":"CartOrder.stories-5ae822dd.js","sources":["../../src/hooks/useFutureResult.ts","../../src/recoil/queries/ordersQuery.ts","../../src/recoil/atoms/remoteCartItemsState.ts","../../src/recoil/user/userRemoteCartItemsState.ts","../../src/utils/Future.ts","../../src/hooks/useMutation.ts","../../src/hooks/useOrderMutation.ts","../../src/recoil/atoms/cartOrderPriceState.ts","../../src/recoil/user/userCartOrderPriceState.ts","../../src/recoil/queries/cartPointsQuery.ts","../../src/recoil/user/userCartPointsState.ts","../../src/components/CartOrder.tsx"],"sourcesContent":["import { useMemo, useState } from 'react';\nimport type Future from '../utils/Future';\n\ntype FutureResult<TData> =\n  | {\n      isLoading: false;\n      isFulfilled: false;\n      isError: false;\n    }\n  | {\n      isLoading: true;\n      isFulfilled: false;\n      isError: false;\n    }\n  | {\n      isLoading: false;\n      isFulfilled: true;\n      isError: false;\n      data: TData;\n    }\n  | {\n      isLoading: false;\n      isFulfilled: false;\n      isError: true;\n      error: unknown;\n    };\n\nconst useFutureResult = <TData>(future: Future<TData> | null): FutureResult<TData> => {\n  const [key, setKey] = useState({});\n  const rerender = () => setKey({});\n\n  const result: FutureResult<TData> = useMemo(() => {\n    if (future === null) {\n      return { isLoading: false, isFulfilled: false, isError: false };\n    }\n    try {\n      const data = future.unwrap();\n      return { isLoading: false, isFulfilled: true, isError: false, data };\n    } catch (thrown) {\n      if (thrown instanceof Promise) {\n        thrown.then(rerender).catch(rerender);\n\n        return { isLoading: true, isError: false, isFulfilled: false };\n      }\n      return { isLoading: false, isFulfilled: false, isError: true, error: thrown };\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [future, key]);\n\n  return result;\n};\n\nexport default useFutureResult;\n","import { selectorFamily } from 'recoil';\nimport type { Client } from '../../api';\n\ntype OrdersQueryParams = {\n  client: Client;\n};\n\nconst ordersQuery = selectorFamily({\n  key: 'ordersQuery',\n  get:\n    ({ client }: OrdersQueryParams) =>\n    () =>\n      client.get('/orders'),\n});\n\nexport default ordersQuery;\n","import { DefaultValue, atomFamily, selectorFamily } from 'recoil';\nimport type { Client } from '../../api';\nimport type { CartItemEntity } from '../../api/rest/ShoppingCartRestAPI';\nimport cartItemsQuery from '../queries/cartItemsQuery';\nimport remoteCartItemsStorage from '../storages/remoteCartItemsStorage';\n\ntype RemoteCartItemsState = {\n  cartItems: CartItemEntity[];\n  isSynchronizing: boolean;\n};\n\nconst remoteCartItemsState = atomFamily<RemoteCartItemsState, Client>({\n  key: 'remoteCartItemsState',\n  default: selectorFamily({\n    key: 'remoteCartItemsState/default',\n    get:\n      (client) =>\n      ({ get }) => {\n        const response = get(cartItemsQuery({ client }));\n\n        return {\n          isSynchronizing: false,\n          cartItems: response.acceptOrThrow(200).data,\n        };\n      },\n  }),\n  effects: (client) => [\n    ({ setSelf, getPromise }) => {\n      const willStorage = getPromise(remoteCartItemsStorage(client));\n\n      willStorage.then((storage) => {\n        storage.doDownstreamSync();\n\n        storage.onSync((info) => {\n          setSelf((syncStatus) => {\n            if (syncStatus instanceof DefaultValue) {\n              if (info.isSynchronizing) return syncStatus;\n\n              return { cartItems: info.cartItems, isSynchronizing: info.isSynchronizing };\n            }\n\n            return {\n              cartItems: syncStatus.cartItems,\n              ...info,\n            };\n          });\n          console.log(info.isSynchronizing ? 'synchronizing ...' : 'synchronized');\n        });\n      });\n    },\n  ],\n});\n\nexport default remoteCartItemsState;\n","import { selector } from 'recoil';\nimport clientState from '../atoms/clientState';\nimport remoteCartItemsState from '../atoms/remoteCartItemsState';\n\nconst userRemoteCartItemsState = selector({\n  key: 'userRemoteCartItemsState',\n  get: ({ get }) => {\n    const client = get(clientState);\n\n    return get(remoteCartItemsState(client));\n  },\n});\n\nexport default userRemoteCartItemsState;\n","const NotExists = Symbol('NotExists');\n\nclass Future<TData, TError = Error> {\n  private promise: Promise<TData>;\n\n  private data: typeof NotExists | TData = NotExists;\n\n  private error: typeof NotExists | TError = NotExists;\n\n  constructor(private readonly fn: () => Promise<TData>) {\n    this.promise = this.fn();\n    this.promise\n      .then((data) => {\n        this.data = data;\n      })\n      .catch((error) => {\n        this.error = error;\n        console.error(error);\n      });\n  }\n\n  toPromise(): Promise<TData> {\n    return this.promise;\n  }\n\n  unwrap(): TData {\n    if (this.error !== NotExists) throw this.error;\n\n    if (this.data === NotExists) throw this.promise;\n\n    return this.data;\n  }\n}\n\nexport default Future;\n","import { useState } from 'react';\nimport Future from '../utils/Future';\n\ntype UseMutationReturn<TParams extends unknown[], TData, TError> = {\n  future: Future<TData, TError> | null;\n  mutate: (...args: TParams) => Promise<TData>;\n};\n\nconst useMutation = <TParams extends unknown[], TData, TError = Error>(\n  mutationFn: (...args: TParams) => Promise<TData>,\n): UseMutationReturn<TParams, TData, TError> => {\n  const [future, setFuture] = useState<Future<TData, TError> | null>(null);\n  const mutate = (...args: TParams): Promise<TData> => {\n    const future = new Future<TData, TError>(() => mutationFn(...args));\n    setFuture(future);\n    return future.toPromise();\n  };\n\n  return {\n    future,\n    mutate,\n  };\n};\n\nexport default useMutation;\n","import { useRecoilRefresher_UNSTABLE as useRecoilRefresher, useRecoilValue } from 'recoil';\nimport clientState from '../recoil/atoms/clientState';\nimport ordersQuery from '../recoil/queries/ordersQuery';\nimport profileQuery from '../recoil/queries/profileQuery';\nimport userCartItemsRepository from '../recoil/user/userCartItemsRepository';\nimport userRemoteCartItemsState from '../recoil/user/userRemoteCartItemsState';\nimport useMutation from './useMutation';\n\ntype UseOrderMutationParams = {\n  usedPoints: number;\n};\n\nconst useOrderMutation = () => {\n  const client = useRecoilValue(clientState);\n  const { cartItems } = useRecoilValue(userRemoteCartItemsState);\n  const { doDownstreamSync } = useRecoilValue(userCartItemsRepository);\n\n  const refreshProfile = useRecoilRefresher(profileQuery({ client }));\n  const refreshOrders = useRecoilRefresher(ordersQuery({ client }));\n\n  const refreshStates = () => {\n    refreshProfile();\n    refreshOrders();\n    doDownstreamSync();\n  };\n\n  const { mutate: order, ...mutationParams } = useMutation(\n    ({ usedPoints }: UseOrderMutationParams) =>\n      client\n        .post('/orders', {\n          usedPoints,\n          cartItems: cartItems\n            .filter((cartItem) => cartItem.checked)\n            .map((cartItem) => ({\n              id: cartItem.id,\n              productId: cartItem.product.id,\n              quantity: cartItem.quantity,\n            })),\n        })\n        .then((response) => Number(response.acceptOrThrow(201).headers.location.split('/').pop()))\n        .finally(refreshStates),\n  );\n\n  return { order, ...mutationParams };\n};\n\nexport default useOrderMutation;\n","import { selectorFamily } from 'recoil';\nimport type { Client } from '../../api';\nimport cartItemsState from './cartItemsState';\n\ntype CartOrderPriceState = {\n  products: number;\n  shippingFee: number;\n  total: number;\n};\n\nconst cartOrderPriceState = selectorFamily<CartOrderPriceState, Client>({\n  key: 'cartOrderPriceState',\n  get:\n    (client) =>\n    ({ get }) => {\n      const cartItems = get(cartItemsState(client));\n\n      const productsPrice = cartItems\n        .filter((cartItem) => cartItem.checked)\n        .reduce((sum, cartItem) => sum + cartItem.quantity * cartItem.product.price, 0);\n      const shippingFee = productsPrice > 0 ? 3000 : 0;\n\n      const prices = {\n        products: productsPrice,\n        shippingFee,\n      };\n\n      return {\n        ...prices,\n        total: Object.values(prices).reduce((sum, current) => sum + current, 0),\n      };\n    },\n});\n\nexport default cartOrderPriceState;\n","import { selector } from 'recoil';\nimport cartOrderPriceState from '../atoms/cartOrderPriceState';\nimport clientState from '../atoms/clientState';\n\nconst userCartOrderPriceState = selector({\n  key: 'userCartOrderPriceState',\n  get: ({ get }) => {\n    const client = get(clientState);\n\n    return get(cartOrderPriceState(client));\n  },\n});\n\nexport default userCartOrderPriceState;\n","import { selectorFamily } from 'recoil';\nimport type { Client } from '../../api';\nimport remoteCartItemsState from '../atoms/remoteCartItemsState';\n\ntype CartPointsQueryParams = {\n  client: Client;\n};\n\nconst cartPointsQuery = selectorFamily({\n  key: 'cartPointsQuery',\n  get:\n    ({ client }: CartPointsQueryParams) =>\n    ({ get }) => {\n      get(remoteCartItemsState(client));\n\n      return client.get('/cart-points');\n    },\n});\n\nexport default cartPointsQuery;\n","import { selector } from 'recoil';\nimport type { CartPoints } from '../../types/CartPoints';\nimport clientState from '../atoms/clientState';\nimport cartPointsQuery from '../queries/cartPointsQuery';\n\nconst userCartPointsState = selector<CartPoints>({\n  key: 'userCartPointsState',\n  get: ({ get }) => {\n    const client = get(clientState);\n\n    const response = get(cartPointsQuery({ client }));\n    return response.acceptOrThrow(200).data;\n  },\n});\n\nexport default userCartPointsState;\n","import { useNavigate } from 'react-router-dom';\nimport { useRecoilValue } from 'recoil';\nimport { styled } from 'styled-components';\nimport useFutureResult from '../hooks/useFutureResult';\nimport useOrderMutation from '../hooks/useOrderMutation';\nimport userCartOrderPriceState from '../recoil/user/userCartOrderPriceState';\nimport userCartPointsState from '../recoil/user/userCartPointsState';\nimport userRemoteCartItemsState from '../recoil/user/userRemoteCartItemsState';\nimport Button from './common/Button';\nimport PriceFormat from './common/PriceFormat';\nimport Spinner from './common/Spinner';\nimport AwaitRecoilState from './utils/AwaitRecoilState';\n\nconst CartOrderContainer = styled.form`\n  min-width: 440px;\n  border: 1px solid #dddddd;\n`;\n\nconst Title = styled.h1`\n  padding: 20px 30px;\n\n  font-size: 24px;\n  font-weight: 400;\n`;\n\nconst Divider = styled.hr`\n  height: 3px;\n  background-color: #dddddd;\n`;\n\nconst Content = styled.section`\n  display: flex;\n  flex-direction: column;\n\n  padding: 30px;\n`;\n\nconst ContentPlaceholder = styled.h2`\n  font-size: 16px;\n  text-align: center;\n  color: #444444;\n`;\n\nconst PriceField = styled.p`\n  display: flex;\n  margin-bottom: 20px;\n\n  font-size: 20px;\n  font-weight: 700;\n`;\n\nconst PriceFieldName = styled.p``;\n\nconst PriceFieldValue = styled.p`\n  margin-left: auto;\n`;\n\nconst ContentDivider = styled.hr`\n  height: 20px;\n  background: transparent;\n  border: none;\n`;\n\ntype CartOrderProps = {\n  isCartEmpty: boolean;\n  onOrderDone?: (orderId: number) => void;\n};\n\nconst CartOrder = (props: CartOrderProps) => {\n  const navigate = useNavigate();\n  const { isCartEmpty, onOrderDone = (orderId) => navigate(`/orders/${orderId}/done`) } = props;\n\n  const prices = useRecoilValue(userCartOrderPriceState);\n  const { isSynchronizing } = useRecoilValue(userRemoteCartItemsState);\n\n  const { order, future } = useOrderMutation();\n  const orderResult = useFutureResult(future);\n\n  const handleSubmitOrder: React.FormEventHandler<HTMLFormElement> = async (event) => {\n    event.preventDefault();\n\n    const orderId = await order({ usedPoints: 0 });\n    onOrderDone(orderId);\n  };\n\n  return (\n    <CartOrderContainer onSubmit={handleSubmitOrder}>\n      <Title>결제예상금액</Title>\n      <Divider />\n\n      <Content>\n        {isCartEmpty ? (\n          <>\n            <ContentDivider />\n            <ContentPlaceholder>주문할 상품을 선택해주세요!</ContentPlaceholder>\n            <ContentDivider />\n          </>\n        ) : (\n          <>\n            <PriceField>\n              <PriceFieldName>총 상품가격</PriceFieldName>\n              <PriceFieldValue>\n                <PriceFormat price={prices.products} />\n              </PriceFieldValue>\n            </PriceField>\n\n            <PriceField>\n              <PriceFieldName>총 배송비</PriceFieldName>\n              <PriceFieldValue>\n                <PriceFormat price={prices.shippingFee} />\n              </PriceFieldValue>\n            </PriceField>\n\n            <ContentDivider />\n\n            <PriceField>\n              <PriceFieldName>적립 포인트</PriceFieldName>\n\n              <PriceFieldValue>\n                <AwaitRecoilState state={userCartPointsState} loadingElement={<Spinner />}>\n                  {(cartPoints) => (\n                    <>\n                      <PriceFormat price={cartPoints.expectedSavePoints} unit=\"P\" /> (\n                      {cartPoints.savingRate}%)\n                    </>\n                  )}\n                </AwaitRecoilState>\n              </PriceFieldValue>\n            </PriceField>\n\n            <ContentDivider />\n\n            <PriceField>\n              <PriceFieldName>총 주문금액</PriceFieldName>\n              <PriceFieldValue>\n                <PriceFormat price={prices.total} />\n              </PriceFieldValue>\n            </PriceField>\n\n            <ContentDivider />\n\n            <Button disabled={orderResult.isLoading || isSynchronizing}>\n              {orderResult.isLoading ? <Spinner /> : '주문하기'}\n            </Button>\n          </>\n        )}\n      </Content>\n    </CartOrderContainer>\n  );\n};\n\nexport default CartOrder;\n"],"names":["useFutureResult","future","key","setKey","useState","rerender","useMemo","thrown","ordersQuery","selectorFamily","client","remoteCartItemsState","atomFamily","get","cartItemsQuery","setSelf","getPromise","remoteCartItemsStorage","storage","info","syncStatus","DefaultValue","userRemoteCartItemsState","selector","clientState","NotExists","Future","fn","data","error","useMutation","mutationFn","setFuture","args","useOrderMutation","useRecoilValue","cartItems","doDownstreamSync","userCartItemsRepository","refreshProfile","useRecoilRefresher","profileQuery","refreshOrders","refreshStates","order","mutationParams","usedPoints","cartItem","response","cartOrderPriceState","productsPrice","cartItemsState","sum","shippingFee","prices","current","userCartOrderPriceState","cartPointsQuery","userCartPointsState","CartOrderContainer","styled","Title","Divider","Content","ContentPlaceholder","PriceField","PriceFieldName","PriceFieldValue","ContentDivider","CartOrder","props","navigate","useNavigate","isCartEmpty","onOrderDone","orderId","isSynchronizing","orderResult","handleSubmitOrder","event","jsxs","jsx","Fragment","PriceFormat","AwaitRecoilState","Spinner","cartPoints","Button"],"mappings":"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"}